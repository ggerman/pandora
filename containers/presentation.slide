Containers: docker
Balbuceos sobre una tecnología de moda.

* Links

.link https://www.docker.com/ Docker | https://www.docker.com/
.link https://www.vagrantup.com/ Vagrant | https://www.vagrantup.com/
.link https://www.chef.io/chef/ chef | https://www.chef.io/chef/
.link https://puppetlabs.com/ puppets | https://puppetlabs.com/
.link http://www.javiergarzas.com/2015/08/docker-vs-puppet-vs-vagrant-vs-chef.html docker vs puppet vs vagrant vs chef

* Licencias

En su mayoria tenemos opciones de elegir soluciones libres en esta teconología. Aunque como todo corre en un servidor terminaremos pagando para que nuestros containers corran en un infrestructura que es complicado saber sus licencias.

.image images/inspeccionar.jpg 323 800

* Licencias

.image images/docker.png 48 199 
Apache License | Version 2.0, January 2004 | https://www.apache.org/licenses/ [FREE]

.image images/vagrant.png 64 248
The MIT License [FREE]

.image images/virtualbox.png 68 358
GNU General Public License V2 [FREE]

* Licencias

.image images/puppet.png 53 157
.link https://puppetlabs.com/sites/default/files/Puppet%20Labs%20-%20FORM%20-%20Software%20License%20Agreement%20%28Puppet%20Enterprise%20-%20Clickwrap%29%203.7.14.pdf  Licencia | Privativa

.image images/chef.png 196 233
Apache License | Version 2.0, January 2004 | esta medio escondido pero esta así que [FREE]

.link https://github.com/chef/chef chef | source code

* boot2docker

_es_un_linuxito_ que sirve para correr containers Docker dentro de plataformas no Linux y también corre en Linux.

.link http://boot2docker.io/ http://boot2docker.io/

Es un desarrollo libre que nos permite correr la infraestructura de containers dentro de plataformas Windows / MacOs / Linux.

.image images/isolation.png 103 704

* Acerca de la charla

- Principalmente Docker

- ¿Porque vagrant?

- ¿Porque Chef?

- ¿Porque Puppet?

* Docker ¿Que es docker?

Docker nos permite empaquetar una aplicación con todas sus dependencias en un contenedor.

.image images/what_is_layered_filesystems_sm.png 190 200

Los contenedores Docker son un sistema de archivos completo donde podemos colocar nuestras aplicaciones con todas sus librerias. Aqui podemos instalar todo lo que necesitamos en un servidor y esto nos garantiza que estaremos ejecutando el mismo código con las mismas librerias independientemente del entorno.

* Docker - Isolation

"La buena práctica" - existe la idea de que cada containar por cuestiones de seguridad y menor promiscuidad debe estar corriendo solo una cosa y no mas que eso. A esto se le llama aislamiento y es algo que es muy valorado dentro de las comunidades de creadores de containers.

.image images/aislamiento-social.jpg

NOTA: es algo que esta bueno saberlo, pero a la hora de SHIP (enviar la aplicacion a un amigo que no es experto) no es tan útil ya que es mas sencillo hacer solo un container con todo adentro y listo.

* Docker - Usando

  Como discutimos en general a las tecnologias las debemos utilizar para servirnos de ellas.

En todas las charlas de Docker que e visto hay una fuerte tendencia a crear una infrestructura, con fines de empresa (seguridad, escalabilidad, etc ...)

Pero como programador también veo muchos beneficios que a veces no son tan parecidos a un deber ser de infraestructura empresarial. Y esto es que en tiempo de desarrollo meter toda una aplicación con sus dependencias en un solo container (app, database, etc...), es algo que puede ser útil y hacernos ganar tiempo.

  En este caso dejariamos las buenas practicas para el deploy 
  y nuestro equipo solo deberia conocer el comando.
  # docker import app.tar.gz

.image images/157594438.jpg

* Creando un container - Instalación

  1º step: instalar docker

.link http://docs.docker.com/mac/started/ install | http://docs.docker.com/mac/started/

.image images/non-root.png

* Creando un container - search
  
  2º step: buscar una imagen:
  # docker search clojure

.image images/clojure.png
  
* Creando un container - run / build

  3º step: en este caso run y build funcionan de la misma manera

Cuando corremos (run) o creamos una imagen (build) docker primero busca si no se encuentra en nuestro host local y si no esta allí, la descarga de docker hub. 

  Descarga los layers que le faltan para completar nuestra imagen.

.image images/clojure-pull.png  

* Creando un container - run / build -> ps -a

  Conocer los containers que estan corriendo en nuestro host.
  # docker ps -a

.image images/clojure-ps-a.png

  Matar todos los containers corriendo en nuestro host
  # docker rm $(docker ps -a -q)

  Listar todas las imagenes alojadas en nuestro host
  # docker images 
  Borrar una imagen:
  # docker rmi -f 865a6d4ec0ed 

.image images/docker-img.png 

* Creando un container - hagamos correr clojure (lein)

.link https://hub.docker.com/_/clojure/ clojure | https://hub.docker.com/_/clojure/

_Dockerfile_

  FROM clojure
  COPY . /usr/src/app
  WORKDIR /usr/src/app
  CMD ["lein", "run"]

  # docker build -t rubylit/clojure .

.image images/clojure-dockerfile-build.png

* Creando un container - RUN

  # docker run -it --rm --name gg rubylit/clojure

* Docker

Comandos importantes para docker:

  run       Run a command in a new container

Pone en marcha un nuevo container a partir de una imagen que puede o no ser local.
ej: 

  docker run -d -p 5432:5432 --name db postgres

Los argumentos como -p para exponer los puertos y --link para generar un nombre de enlace son de gran ayuda a la hora de comunicar partes aisladas de una aplicación.

* Docker Build

Docker puede construir imagenes siguiendo las instrucciones que le pasamos en un Dockerfile.

  FROM debian:stable
  MAINTAINER Giménez Silva Germán Alberto <ggerman@gmail.com>
  RUN echo 'deb http://ftp.us.debian.org/debian/ stable main non-free contrib' >> /etc/apt/sources.list
  RUN apt-get update
  RUN apt-get install -y dosbox --no-install-recommends
  RUN apt-get install -y openjdk-7-jre --no-install-recommends
  RUN apt-get clean
  RUN mkdir ~/Pacman
  # el contenido que queremos copiar a la carpeta debe estar en el path actual
  COPY ./Pacman/* ~/Pacman/ 
  ENTRYPOINT ["dosbox"]

Linea de comando:

  # docker build -t myname/tag .

* Docker images

Utilizando images obtenemos un listado de todas nuestros contenedores (no necesariamente corriendo en nuestro sistema). Si alguno de estos containers nos molesta o queremos desacernos de él lo podemos remover con rmi o rmi -f y a continuación su ID.

.image images/docker-images.png 166 937

Estas imagenes estan listas para correr.

* Docker Run

  docker run --name ruby-postgres -e POSTGRES_PASSWORD=asdasd123 -d postgres
