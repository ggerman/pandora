Introducción a docker.
Build, Ship, Run any app.

Una plataforma abierta de distribución de aplicaciones para desarrolladores y administradores.

  Giménez Silva Germán Alberto
  Programador para EosWeb
  http://www.eosweb.info
  ggerman@gmail.com
  @gsgerman

  Manuel Garcia
  Director Altoros Argentina
  http://www.altoros.com
  manuel.garcia@altoros.com
  @mgarcia

(Contenidos adaptados para la FliSol 2016)



* Rápidamente: ¿Que es Docker?.

Docker es una herramienta que puede _empaquetar_una_aplicación_y_sus_dependencias_en_un_contenedor_virtual_que_se_puede_ejecutar_en_cualquier_servidor_Linux_.

Esto permite flexibilidad y portabilidad en la aplicación que se puede ejecutar, ya sea en las instalaciones físicas, la nube pública, nube privada, etc.

.image images/ping.png 167 988
.image images/container.png 174 697

* Links

.link https://www.docker.com/ Docker (https://www.docker.com/)
.link https://github.com/docker Código fuente (https://github.com/docker)
.link https://github.com/ggerman/pandora/tree/master/containers Esta presentación (https://github.com/ggerman/pandora/tree/master/containers)
.image images/docker-footer.png 403 1000

* Licencias

.link https://www.apache.org/licenses/ Apache License - Version 2.0, January 2004

Versión 2.0
La ASF adoptó la licencia Apache v2.0 en enero de 2004. Entre los objetivos declarados de la licencia se incluyen: hacer más fácil para proyectos que no son ASF que la utilicen, la mejora de la compatibilidad con software basado en GPL, permitiendo que la licencia sea incluida por referencia en lugar de la lista de cada archivo (o todos los archivos), aclarando la licencia en cuanto a sus contribuciones, y que requiere una licencia de patente sobre las contribuciones que necesariamente infrinjan patentes propias de un contribuyente. (fuente: wikipedia)

.image images/inspeccionar.jpg 323 800

* Que no incluye la charla

- Detalles del funcionamiento del Kernel Linux.
- Detalles del funcionamiento del Demonio Docker.
- Detalles avanzados de configuración de sistemas.
- Herramientas adicionales a Docker (docker-machine, swarm, etc...)

.image images/no.png 369 395

* Acerca de la charla (Introducción a Docker)

- Escribir un Dockerfile básico.

- Construir una imagen.

- Poner a correr un container.

- Enlace entre containers. (aplicación y báse de datos)

- Correr múltiples containers configurados usando docker-compose

.image images/yes.png 288 1000

* Docker ¿Qué es docker?

Docker nos permite empaquetar una aplicación con todas sus dependencias en un contenedor.

.image images/what_is_layered_filesystems_sm.png 285 300

  Los contenedores Docker son un sistema de archivos completo donde podemos colocar nuestras 
  aplicaciones con todas sus librerías. Aqui podemos instalar todo lo que necesitamos 
  en un servidor y esto nos garantiza que estaremos ejecutando el mismo código con las 
  mismas librerías, independientemente del entorno.

* Instalando Docker (DEBIAN)

1. Update the APT package index.

  $ sudo apt-get update

2. Install Docker.

  $ sudo apt-get install docker-engine

3. Start the docker daemon.  

  $ sudo service docker start

4. Verify docker is installed correctly.

  $ sudo docker run hello-world

* docker run hello-world

.image images/docker-run-hello-world.png

* Instalando Docker

.link https://docs.docker.com/installation/debian/ install | https://docs.docker.com/installation/debian/

.image images/non-root.png

* Intro:

  Para tener un container necesitamos de:
  - Descargar o crear una imagen

¿Que es una imagen?

Una imagen para Docker es el espacio de disco que contiene el conjunto de aplicaciones que necesitamos para poner en marcha nuestro container:

- GNU/Linux Distribución
- Librerias o Servicios que necesita nuestra aplicación.

  Nota: Todo esto se define en un archivo llamado Dockerfile y se crea la imagen ejecutando 
  # docker build -t image-name .

El container es la ejecución de esa imagen (o la imagen corriendo)

  # docker run -i -t image-name

* Buscar una imagen - search
  
  Buscar una imagen (https://hub.docker.com/): 
  # docker search mongo

.image images/mongodb.png

* Creando un container - run / build

  En este caso run y build funcionan de la misma manera

Cuando corremos (run) o creamos una imagen (build) docker primero busca si no se encuentra en nuestro host local y si no está allí, la descarga de docker hub. 

  Descarga los layers que le faltan para completar nuestra imagen.

.image images/busybox-pull.png 223 948 

* Tips:

Poner en marcha un container:

  docker run -i -t image-name

Montar un volumen con archivos externos al container:

  docker run --name mongo-name -v /mi/directorio/local:/data/db -d mongo:tag

Ejecutar la linea de comandos en un container:

  docker run -i -t image-name /bin/bash

Exportar puertos de un contenedor (y que corra como demonio):

  docker run -d -p 3999:3999 presentation


* Administrar containers: ps -a

  Conocer los containers que estan corriendo en nuestro host.
  # docker ps -a

.image images/volt-ps-a.png

  Matar todos los containers corriendo en nuestro host
  # docker rm $(docker ps -a -q)

  Listar todas las imagenes alojadas en nuestro host
  # docker images 
  Borrar una imagen:
  # docker rmi -f 865a6d4ec0ed 

.image images/docker-img.png 

* Creando un container - hagamos correr volt con mongodb (1)

_Dockerfile_

.code volt/Dockerfile

.link http://voltframework.com/ VOLT | http://voltframework.com/

* Creando un container - hagamos correr volt con mongodb (2)

  # docker build -t voltframework .

.image images/volt-dockerfile-build.png

* Creando un container - RUN (1)

  # docker run -p 3000:3000 --name volt voltframework

.image images/volt-running-container.png

Aqui estamos corriendo una instancia de nuestra aplicación (container).
El parámetro -d hace correr la instancia RUN como demonio.
  
  # docker run -d -p 3000:3000 --name volt voltframework

.image images/volt-running-daemon.png

* Creando un container - RUN (2)

.image images/volt-welcome-page.png

.image images/hostname.png

* Volt: conectando a la base de datos.

Volt contiene un archivo de configuración config/app.rb. Que a los fines de esta presentación voy a eliminar y copiar uno con mi configuración para que funcione con una conexión a otro container donde tendremos mongoDB.

.code volt/manualy.rb

* MongoDB: puesta en marcha de la base de datos.

  # docker run -d --name db --port 27017:27017 mongo

.image images/volt-mongodb-manualy.png

* MongoDB: puesta en marcha de la base de datos. (2)

  # docker ps -a
  CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                      NAMES
  91531052333f        mongo               "/entrypoint.sh mong   16 minutes ago      Up 16 minutes       0.0.0.0:27017->27017/tcp   db                  
  4602ce309ddc        voltframework       "bundle exec volt se   35 minutes ago      Up 35 minutes       0.0.0.0:3000->3000/tcp     volt
  # docker logs 4602ce309ddc

.image images/volt-docker-logs.png

  (divagando) >> Ejecutar un comando en un container que ya esta corriendo.
  # docker exec -it 4602ce309ddc vim config/app.rb

.image images/volt-editing-configuration.png

* ¡ Listo ! Ya tenemos todo corriendo en containers

.image images/happy-docker.png

* DOCKER: Esta cosa tiene commits y layers

Cuando modificamos un container este es tan efímero como lo es nuestro entorno, para que los cambios persistan debemos hacer commits.

  # docker commit 4602ce309ddc voltframework:version2

LAYERS: ¿a qué nos referimos con esto?

Un container no es más que un conjunto de layers agrupados.


  Los layers son etapas que se generan cuando creamos un container
  lo podemos visualizar con el comando build:

  Step 1 : FROM busybox
  Pulling repository busybox
   ---> e9aa60c60128MB/2.284 MB (100%) endpoint: https://cdn-registry-1.docker.io/v1/

Docker tiene la capacidad de reutilizar esos layers todo el tiempo.

 - Reciclaje de paquetes instalados
 - Reciclaje de tiempo de configuración

* docker-compose: haciendo las cosas más automáticas

Compose es una aplicación que nos permite automatizar toda la tarea de conexión entre containers.
Los links son generados por dentro del MAIN HOST de Docker si necesidad de publicar los puertos.
De esta manera, lo único que debemos mostrar es el puerto por el que queremos acceder a nuestra aplicación, dejando que docker orqueste las conexiones entre nuestros containers.

_docker-compose.yml_

.code volt/docker-compose.yml

* docker-compose: database link

Para crear la conexión entre los containers al igual que manualmente publicamos el puerto de la base de datos.

  ports:
    - "27017:27017"

Y dejamos que docker haga el link entre VOLT y Mongo, para esto debemos modificar la configuración de VOLT linkeando con el nuevo nombre.

.code volt/compose.rb

* docker-compose: UP

  # docker-compose up

.image images/docker-compose.jpeg

.image images/volt-running-with-compose.png

* Vagrant

De www.vagrantup.com: "Create and configure lightweight, reproducible, and portable development environments"

.image images/docker-vagrant-diffs.png

* Vagrant (VMs) versus Docker

.image images/vm-diagram.png

* Preguntas 

.image images/preguntas.png


* Agradecimientos:

- Redacción /  Ortografía: María Jimena Franco
- Iniciativa: Manuel Garcia
- Aguante: a los Presentes

.image images/bye.jpg

  docker run --name ruby-postgres -e POSTGRES_PASSWORD=asdasd123 -d postgres


