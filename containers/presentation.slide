Containers: docker
Balbuceos sobre una tecnología de moda.
Tags: Docker, Docker Machine, Volt, MongoDB

Giménez Silva Germán Alberto
Programador para EosWeb
http://www.eosweb.info
ggerman@gmail.com
@gsgerman

Manuel Garcia
Manu definite acá, Altoros
http://www.altoros.com
manuel.garcia@altoros.com
@mgarcia


* Links - Acerca de la presentación:

.link https://www.docker.com/ Docker | https://www.docker.com/ 
.link https://www.vagrantup.com/ Vagrant | https://www.vagrantup.com/

  No se si entra:

.link https://docs.docker.com/machine/ Docker Machine | https://docs.docker.com/machine/

  Puede ser de interés pero NO entra en la presentación:

.link https://docs.docker.com/swarm/install-w-machine/ Swarm 
.link https://giantswarm.io/ Giant Swarm | https://giantswarm.io/
.link https://www.chef.io/chef/ chef | https://www.chef.io/chef/
.link https://puppetlabs.com/ puppets | https://puppetlabs.com/
.link http://www.javiergarzas.com/2015/08/docker-vs-puppet-vs-vagrant-vs-chef.html docker vs puppet vs vagrant vs chef

* Licencias

La mayoría de las opciones para elegir en esta tecnología tienen licencias libres. Aunque, como todo corre en un servidor, terminaremos pagando para que nuestros containers corran en un infrestructura que es complicado conocer sus licencias. En general, serán gnu-linux por economía.

.image images/inspeccionar.jpg 323 800

* Licencias

.image images/docker.png 48 199 
Apache License | Version 2.0, January 2004 | https://www.apache.org/licenses/ [FREE]

.image images/vagrant.png 64 248
The MIT License [FREE]

.image images/virtualbox.png 68 358
GNU General Public License V2 [FREE]

* boot2docker

_es_un_linuxito_ que sirve para correr containers Docker dentro de plataformas no Linux y también corre en Linux.

.link http://boot2docker.io/ http://boot2docker.io/

Es un desarrollo libre que nos permite correr la infraestructura de containers dentro de plataformas Windows / MacOs / Linux.

.image images/isolation.png 103 704

* Acerca de la charla

- 1. Principalmente Docker

- 1.1 Algunos conceptos
- 1.2 Creando un proyecto en docker

- 2. Comparativa con vagrant

* Docker ¿Qué es docker?

Docker nos permite empaquetar una aplicación con todas sus dependencias en un contenedor.

.image images/what_is_layered_filesystems_sm.png 190 200

Los contenedores Docker son un sistema de archivos completo donde podemos colocar nuestras aplicaciones con todas sus librerías. Aqui podemos instalar todo lo que necesitamos en un servidor y esto nos garantiza que estaremos ejecutando el mismo código con las mismas librerías, independientemente del entorno.

* Docker - Isolation

.link https://docs.docker.com/articles/dockerfile_best-practices/ Dockerfile best practices

"La buena práctica" - existe la idea de que en cada container, por cuestiones de seguridad y menor promiscuidad, debe estar corriendo sólo una proceso y no más que eso. A esto se le llama aislamiento y es algo que es muy valorado dentro de las comunidades de creadores de containers.

.image images/aislamiento-social.jpg

NOTA: es algo que esta bueno saberlo, pero a la hora de SHIP (enviar la aplicacion a un amigo que no es experto) no es tan útil, ya que es mas sencillo hacer sólo un container con todo adentro y listo.

* Docker - Usando

En las charlas de Docker que he visto, hay una fuerte tendencia a crear una infrastructura, con fines de empresa (seguridad, escalabilidad, etc ...)

Pero como programador también veo muchos beneficios que a veces no son tan parecidos a un deber ser de infraestructura empresarial. Y esto es, que en tiempo de desarrollo, meter toda una aplicación con sus dependencias en un solo container (app, database, etc...), es algo que puede ser útil y hacernos ganar tiempo.

  En este caso dejaríamos las buenas prácticas para el deploy 
  y nuestro equipo sólo deberia conocer el comando.
  # docker import app.tar.gz

.image images/157594438.jpg

* Creando un container - Instalación

 Instalar docker

.link https://docs.docker.com/installation/debian/ install | https://docs.docker.com/installation/debian/

.image images/non-root.png

* Creando un container - search
  
  Buscar una imagen:
  # docker search mongo

.image images/mongodb.png

* ... Profundizar en esto ...

  Como almacenar registros en docker mongoDB "-v"

.image images/adding-data-to-mongo.png

  
* Creando un container - run / build

  En este caso run y build funcionan de la misma manera

Cuando corremos (run) o creamos una imagen (build) docker primero busca si no se encuentra en nuestro host local y si no está allí, la descarga de docker hub. 

  Descarga los layers que le faltan para completar nuestra imagen.

.image images/busybox-pull.png  

* Creando un container - run / build -> ps -a

  Conocer los containers que estan corriendo en nuestro host.
  # docker ps -a

.image images/volt-ps-a.png

  Matar todos los containers corriendo en nuestro host
  # docker rm $(docker ps -a -q)

  Listar todas las imagenes alojadas en nuestro host
  # docker images 
  Borrar una imagen:
  # docker rmi -f 865a6d4ec0ed 

.image images/docker-img.png 

* Creando un container - hagamos correr volt con mongodb (1)

_Dockerfile_

.code volt/Dockerfile

.link http://voltframework.com/ VOLT | http://voltframework.com/

* Creando un container - hagamos correr volt con mongodb (2)

  # docker build -t voltframework .

.image images/volt-dockerfile-build.png

* Creando un container - RUN (1)

  # docker run -p 3000:3000 --name volt voltframework

.image images/volt-running-container.png

Aqui estamos corriendo una instancia de nuestra aplicación (container).
El parámetro -d hace correr la instancia RUN como demonio.
  
  # docker run -d -p 3000:3000 --name volt voltframework

.image images/volt-running-daemon.png

* Creando un container - RUN (2)

.image images/volt-welcome-page.png

* Volt: conectando a la base de datos.

Volt contiene un archivo de configuración config/app.rb. Que a los fines de esta presentación voy a eliminar y copiar uno con mi configuración para que funcione con una conexión a otro container donde tendremos mongoDB.

.code volt/manualy.rb

* MongoDB: puesta en marcha de la base de datos.

  # docker run -d --name db --port 27017:27017 mongo

.image images/volt-mongodb-manualy.png

* MongoDB: puesta en marcha de la base de datos. (2)

  # docker ps -a
  CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                      NAMES
  91531052333f        mongo               "/entrypoint.sh mong   16 minutes ago      Up 16 minutes       0.0.0.0:27017->27017/tcp   db                  
  4602ce309ddc        voltframework       "bundle exec volt se   35 minutes ago      Up 35 minutes       0.0.0.0:3000->3000/tcp     volt
  # docker logs 4602ce309ddc

.image images/volt-docker-logs.png

  (divagando) >> Ejecutar un comando en un container que ya esta corriendo.
  # docker exec -it 4602ce309ddc vim config/app.rb

.image images/volt-editing-configuration.png

* ¡ Listo ! Ya tenemos todo corriendo en containers

.image images/happy-docker.png

* DOCKER: Esta cosa tiene commits y layers

Cuando modificamos un container este es tan efímero como lo es nuestro entorno, para que los cambios persistan debemos hacer commits.

  # docker commit 4602ce309ddc voltframework:version2

LAYERS: ¿a qué nos referimos con esto?

Un container no es más que un conjunto de layers agrupados.


  Los layers son etapas que se generan cuando creamos un container
  lo podemos visualizar con el comando build:

  Step 1 : FROM busybox
  Pulling repository busybox
   ---> e9aa60c60128MB/2.284 MB (100%) endpoint: https://cdn-registry-1.docker.io/v1/

Docker tiene la capacidad de reutilizar esos layers todo el tiempo.

 - Reciclaje de paquetes instalados
 - Reciclaje de tiempo de configuración

* docker-compose: haciendo las cosas más automáticas

Compose es una aplicación que nos permite automatizar toda la tarea de conexión entre containers.
Los links son generados por dentro del MAIN HOST de Docker si necesidad de publicar los puertos.
De esta manera, lo único que debemos mostrar es el puerto por el que queremos acceder a nuestra aplicación, dejando que docker orqueste las conexiones entre nuestros containers.

_docker-compose.yml_

.code volt/docker-compose.yml

* docker-compose: database link

Para crear la conexión entre los containers al igual que manualmente publicamos el puerto de la base de datos.

  ports:
    - "27017:27017"

Y dejamos que docker haga el link entre VOLT y Mongo, para esto debemos modificar la configuración de VOLT linkeando con el nuevo nombre.

.code volt/compose.rb

* docker-compose: UP

  # docker-compose up

.image images/docker-compose.jpeg

.image images/volt-running-with-compose.png

* docker-machine

Miren la hora y pregúntense

** ¿Seguimos con docker-machine?

* Preguntas 

.image images/preguntas.png


* Agradecimientos:

- Redacción /  Ortografía: María Jimena Franco
- Iniciativa: Manuel Garcia
- Logística: Manuel Garcia, Altoros, EosWeb
- Aguante: a los Presentes

.image images/bye.jpg

